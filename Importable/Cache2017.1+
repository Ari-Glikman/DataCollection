<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="IRIS for Windows (x86-64) 2022.3 (Build 606U)" ts="2023-06-25 16:16:39">
<Class name="Sample.DBExpansion.DBSizeAnalysis.CaptureInfo">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>66604,62459.42215</TimeChanged>
<TimeCreated>66584,32814.956927</TimeCreated>

<Method name="PopulateDBTable">
<Description><![CDATA[
pass by reference an address for the function to return a value to, will be used by the <Method>RetrieveData()</Method>
the parameter passed by reference will be filled with the ID of the newly inserted DB statistics
this ID will be the MetaDataID of the globals inserted into the globals table in <Method>PopulateGlobalTable</Method>, and hence the MetaID parameter passed as in <Method>RetrieveData()</Method>
<br>
<br>
updates the <CLASS> Sample.DBExpansion.Data.DBAnalysisInfo </CLASS> class / <method> Sample_DBExpansion_Data.DBAnalysisInfo </method> table]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rowID:%Integer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		/// take the newest time
		&sql(Select TOP 1 TimeStampEnd Into :timeStampEnd From Sample_DBExpansion_Data.DBAnalysisInfo ORDER BY TimeStampEnd DESC)
		if (SQLCODE < 0) //0 or 100 is okay here since there may be no data in table
	     	{
		 		set status = $$$ERROR($$$GeneralError, "TimeRetrieval Failed")    
		 		return $$$ADDSC(status,SQLCODE)
		 	}
		set newAmountMsgs = ##class(Sample.DBExpansion.Util.Helper).getNewMessageNum(timeStampEnd)
		set stampStart = $ZDATETIME($HOROLOG,3)
		
		set DBstatement=##class(%SQL.Statement).%New()
	    set DBstatus=DBstatement.%PrepareClassQuery("%SYS.DatabaseQuery", "FreeSpace")
	    
	    do ##class(%SYS.Namespace).GetNSInfo($NAMESPACE, .dbinfo)
	    set directory = dbinfo("Directory")
	    #dim DBresultset As %SQL.StatementResult
		set DBresultset=DBstatement.%Execute($lb(directory)) 
		/// set DBresultset=DBstatement.%Execute("*") // this is to execute on all databases
		
		if (DBresultset.%SQLCODE '=0) ///output error
		{
			set status = $$$ERROR($$$GeneralError,"%Execute failed")
			return $$$ADDSC(status,SQLCODE)
		}
		
		while DBresultset.%Next(){//for each database if * is enabled above
		
			set allocatedSize = DBresultset.%Get("Size")
			set unusedSpace = DBresultset.%Get("Available")
			// check units... convert everything to MB for now (GB->MB)
			if ($FIND(allocatedSize, "GB") > 0) 
			{
				set allocatedSize = allocatedSize*1000 //i think this should be 1024 but it matches the sql results with 1000
			}
			if ($FIND(unusedSpace, "GB") > 0)
			{
				set unusedSpace = unusedSpace*1000
			}
		
			set usedSize = allocatedSize-unusedSpace
		
		
		
		&sql(INSERT INTO Sample_DBExpansion_Data.DBAnalysisInfo 
			(DatabaseName, DBAllocatedSize, DBUsedSize, TimeStampStart, NewMessagesCountSinceLastRun)
	     	VALUES(:directory, :allocatedSize, :usedSize, :stampStart, :newAmountMsgs))
	     
	     if (SQLCODE '=0)
	     {
		 	set status = $$$ERROR($$$GeneralError, "DB Insert Failed")    
		 	return $$$ADDSC(status,SQLCODE)
		 }
	     
	}
	set rowID = %ROWID
	return $$$OK
]]></Implementation>
</Method>

<Method name="PopulateGlobalTable">
<Description><![CDATA[
pass as parameters the metaID of globals that will be added to table (one more than previously exisitng, or 1 if no globals in table), as well as whether to run in 'fast' mode (=1) (no usedMB) or 'slow' mode (=0) (get usedMB), Number of globals to capture (-1 for all), note that it captures in alphabetical order
<br>
<br>
called by <method>RetrieveData()</method>
<br>
<br>
updates the <CLASS> Sample.DBExpansion.Data.GlobalAnalysisInfo </CLASS> class / <method> Sample_DBExpansion_Data.GlobalAnalysisInfo </method> table
<br>
returns status as error or $$$OK]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>MetaID:%Integer,Fast:%Boolean=0,NumGlobalsToGet:%Integer=-1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		set globalCount = 0
		do ##class(%SYS.Namespace).GetNSInfo($NAMESPACE, .dbinfo)
	    set directory = dbinfo("Directory")
	    
		set statement=##class(%SQL.Statement).%New()
   		set status=statement.%PrepareClassQuery("%SYS.GlobalQuery","Size")

    	set resultset=statement.%Execute(directory,,,,,Fast)
    	
    	
    	if (resultset.%SQLCODE '=0) ///output error
		{
			set status = $$$ERROR($$$GeneralError,"%Execute failed")
			return $$$ADDSC(status,SQLCODE)
		}
    
    	//note that globals with same name will appear multiple times in table, hence the timestamp to differentiate and for comparison in task2
       	while (resultset.%Next() && ((globalCount < NumGlobalsToGet) || (NumGlobalsToGet = -1))) { //iterate thru globals, insert into table, if numGlobalsToGet = -1 then get all
       	
			set globalCount = globalCount+1
			set globalName = resultset.%Get("Name")
		    set allocMB = resultset.%Get("Allocated MB")	    
		    set usedMB = resultset.%Get("Used MB")    
			set className = "" //don't want to rewrite classname that was previously written if no classname found, wipe variable

			#dim %sqlcontext As %SQLProcContext 
			set %sqlcontext = ""
			do ##class(%ExtentMgr.Util).GlobalUses("^"_globalName)	
			if (%sqlcontext.%Next())
			{
				set className = %sqlcontext.%Get("UsedByExtent")
			}
      		//// get class name ^^^ 	
	    	&sql(Insert into Sample_DBExpansion_Data.GlobalAnalysisInfo(ClassName, GlobalName, AllocatedMB, UsedMB, MetaDataID)
	    	 VALUES (:className, :globalName, :allocMB, :usedMB, :MetaID))
   	     	if (SQLCODE '=0)
	     	{
		 		set status = $$$ERROR($$$GeneralError, "Global Insert Failed for global: "_globalName)    
		 		return $$$ADDSC(status,SQLCODE)
		 	}	
		}
		
		set dbNewestEntry = ##class(Sample.DBExpansion.Data.DBAnalysisInfo).%OpenId(MetaID)
		set dbNewestEntry.NumOfGlobals = globalCount
		set dbNewestEntry.FastFlag = Fast
		set dbNewestEntry.TimeStampEnd = $ZDATETIME($HOROLOG,3) 
		set saveStatus = dbNewestEntry.%Save()
		if $$$ISERR(saveStatus)
			{
				set status = $$$ERROR($$$GeneralError, "GlobalCount Save Failed")
				return $$$ADDSC(status,saveStatus)
			}
		return $$$OK
]]></Implementation>
</Method>

<Method name="RetrieveData">
<Description>
parameter: whether to run in 'fast' mode (=1) (no usedMB) or 'slow' mode (=0) (get usedMB)
note that fast mode will return 0s in the usedMB field</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Fast:%Boolean,numGlobalsToGet:%Integer=-1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		set st = ..PopulateDBTable(.currID)
		if $$$ISOK(st)
		{
			set st = ..PopulateGlobalTable(currID,Fast, numGlobalsToGet)
		}
		return st
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Data.DBAnalysisInfo">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************
this is the table that will store history of statistics for the desired database</Description>
<Super>%Persistent</Super>
<TimeChanged>66604,40160.7907105</TimeChanged>
<TimeCreated>66584,32659.2919584</TimeCreated>

<Property name="DatabaseName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="TimeStampStart">
<Type>%TimeStamp</Type>
</Property>

<Property name="TimeStampEnd">
<Type>%TimeStamp</Type>
</Property>

<Index name="TimeStampEndIndex">
<Properties>TimeStampEnd</Properties>
</Index>

<Property name="NumOfGlobals">
<Type>%Integer</Type>
</Property>

<Property name="DBAllocatedSize">
<Description>
as string since this will have units after the number</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DBUsedSize">
<Description>
will be calculated as DB Size - DB Available Space</Description>
<Type>%Decimal</Type>
</Property>

<Property name="NewMessagesCountSinceLastRun">
<Type>%Integer</Type>
</Property>

<Property name="FastFlag">
<Description><![CDATA[
indicates whether the corresponding globals in the <Method>Sample.DBExpansion.Data.GlobalAnalysisInfo</Method> were retrieved with usedMB or without (=0)
FastFlag = 1 means that they were retrieved in fast mode (no UsedMB), FastFlag = 0 indicates that the UsedMB field was retrieved as well]]></Description>
<Type>%Boolean</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.DBEx95BC.DBAnalysisInfoD</DataLocation>
<DefaultData>DBAnalysisInfoDefaultData</DefaultData>
<IdLocation>^Sample.DBEx95BC.DBAnalysisInfoD</IdLocation>
<IndexLocation>^Sample.DBEx95BC.DBAnalysisInfoI</IndexLocation>
<StreamLocation>^Sample.DBEx95BC.DBAnalysisInfoS</StreamLocation>
<ExtentSize>1</ExtentSize>
<Data name="DBAnalysisInfoDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DatabaseName</Value>
</Value>
<Value name="3">
<Value>TimeStampStart</Value>
</Value>
<Value name="4">
<Value>TimeStampEnd</Value>
</Value>
<Value name="5">
<Value>NumOfGlobals</Value>
</Value>
<Value name="6">
<Value>DBAllocatedSize</Value>
</Value>
<Value name="7">
<Value>DBUsedSize</Value>
</Value>
<Value name="8">
<Value>NewMessagesCountSinceLastRun</Value>
</Value>
<Value name="9">
<Value>FastFlag</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="DBAllocatedSize">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
</Property>
<Property name="DBUsedSize">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="DatabaseName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>51</AverageFieldSize>
</Property>
<Property name="NewMessagesCountSinceLastRun">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="NumOfGlobals">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="TimeStampEnd">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>21</AverageFieldSize>
</Property>
<Property name="TimeStampStart">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>21</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Sample.DBExpansion.Data.GlobalAnalysisInfo">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************</Description>
<Super>%Persistent</Super>
<TimeChanged>66604,40171.3921135</TimeChanged>
<TimeCreated>66584,32687.3700192</TimeCreated>

<Property name="GlobalName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ClassName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="AllocatedMB">
<Type>%Float</Type>
</Property>

<Property name="UsedMB">
<Type>%Float</Type>
</Property>

<Property name="MetaDataID">
<Type>%Integer</Type>
</Property>

<Index name="MetaDataIDIndex">
<Properties>MetaDataID</Properties>
</Index>

<ForeignKey name="DBAnalysisInfoFK">
<OnDelete>cascade</OnDelete>
<Properties>MetaDataID</Properties>
<ReferencedClass>Sample.DBExpansion.Data.DBAnalysisInfo</ReferencedClass>
</ForeignKey>

<UDLText name="T">
<Content><![CDATA[
// this instead of a one to many relationship

]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.DBE95BC.GlobalAnaly9E3AD</DataLocation>
<DefaultData>GlobalAnalysisInfoDefaultData</DefaultData>
<IdLocation>^Sample.DBE95BC.GlobalAnaly9E3AD</IdLocation>
<IndexLocation>^Sample.DBE95BC.GlobalAnaly9E3AI</IndexLocation>
<StreamLocation>^Sample.DBE95BC.GlobalAnaly9E3AS</StreamLocation>
<ExtentSize>148</ExtentSize>
<Data name="GlobalAnalysisInfoDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>GlobalName</Value>
</Value>
<Value name="3">
<Value>ClassName</Value>
</Value>
<Value name="4">
<Value>AllocatedMB</Value>
</Value>
<Value name="5">
<Value>UsedMB</Value>
</Value>
<Value name="6">
<Value>TimeStamp</Value>
</Value>
<Value name="7">
<Value>MetaDataID</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="AllocatedMB">
<Selectivity>1.2669%</Selectivity>
<OutlierSelectivity>.695946:.008</OutlierSelectivity>
<AverageFieldSize>3.99</AverageFieldSize>
</Property>
<Property name="ClassName">
<Selectivity>1.1457%</Selectivity>
<OutlierSelectivity>.736486:</OutlierSelectivity>
<AverageFieldSize>8.08</AverageFieldSize>
</Property>
<Property name="GlobalName">
<Selectivity>0.6757%</Selectivity>
<AverageFieldSize>19.05</AverageFieldSize>
</Property>
<Property name="MetaDataID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="TimeStamp">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>21</AverageFieldSize>
</Property>
<Property name="UsedMB">
<Selectivity>1.1898%</Selectivity>
<OutlierSelectivity>.452703:0</OutlierSelectivity>
<AverageFieldSize>3.08</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-8</BlockCount>
</SQLMap>
<SQLMap name="MetaDataIDIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Sample.DBExpansion.Task.CaptureInfoTask">
<Description><![CDATA[
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************
calls <Method> ##class(Sample.DBExpansion.DBSizeAnalysis.CaptureInfo.RetrieveData() </Method>]]></Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>66604,63978.9295788</TimeChanged>
<TimeCreated>66584,33141.9658254</TimeCreated>

<Parameter name="TaskName">
<Default><![CDATA[Global&Database Size Analysis Capture]]></Default>
</Parameter>

<Property name="Fast">
<Description>
a 1 indicates that it will retrieve global information as quick as possible (no retrieval of usedMB, only of allocatedMB)
a 0 indicates that it will be slower but more thorough (will retrieve both usedMB and allocatedMB) of globals</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="HowManyGlobals">
<Description>
a -1 indicates get all globals, any other number is how many globals will be captured</Description>
<Type>%Integer</Type>
<InitialExpression>-1</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
		set st = ##class(Sample.DBExpansion.DBSizeAnalysis.CaptureInfo).RetrieveData(..Fast,..HowManyGlobals)
		return st
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Test.CaptureTest">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************</Description>
<Super>%UnitTest.TestCase</Super>
<TimeChanged>66604,75601.6535647</TimeChanged>
<TimeCreated>66584,35885.8020211</TimeCreated>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
	return $$$OK
]]></Implementation>
</Method>

<Method name="TestMessageIncreaseCount">
<Description>
test the getNewMessageNum function</Description>
<Implementation><![CDATA[
	set timebeforeMsgsAdded = $ZDATETIME($HOROLOG,3)
	
	// add x new messages 7 days in the future
	for i = 1:1:16
	{
		set newmsgheader = ##class(Ens.MessageHeader).%New()
		set newmsgheader.TimeCreated = $ZDATETIME($HOROLOG+7,3) /// 10 days in the future, to not get confused with current stats
		set st = newmsgheader.%Save()
		if st'=1 
		{
			do $$$AssertEquals(st, 1)	//alert that saving message header failed only if fails... should not happen
		}		
	}
	set numNewMsgs = ##class(Sample.DBExpansion.Util.Helper).getNewMessageNum(timebeforeMsgsAdded)
	
	// count messages since last db entry 
	// assert that this count is x 
	do $$$AssertEquals(16,numNewMsgs)
]]></Implementation>
</Method>

<Method name="TestPopDBTable">
<Description><![CDATA[
test the <Method>PopulateDBTable</Method> function]]></Description>
<Implementation><![CDATA[
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.CaptureInfo).PopulateDBTable(.MetaID)
	do $$$AssertEquals(st, 1) ///test that populate db table works...

	///check that there is something in the table....
	set query = "SELECT * FROM Sample_DBExpansion_Data.DBAnalysisInfo WHERE ID = ?" //get all unique globalnames   
	set statement = ##class(%SQL.Statement).%New()
	set status = statement.%Prepare(query)
	set resultset = statement.%Execute(MetaID)
	do $$$AssertEquals(resultset.%SQLCODE, 0)
	&sql(DELETE FROM Sample_DBExpansion_Data.DBAnalysisInfo WHERE ID = :MetaID)
	do $$$AssertEquals(SQLCODE, 0) /// test that we can delete the table from db
]]></Implementation>
</Method>

<Method name="TestPopGlobalTable">
<Implementation><![CDATA[
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.CaptureInfo).PopulateDBTable(.MetaID)
	do $$$AssertEquals(st, 1) ///test that populate db table works...
	
	///check that there is something in the table....
	set query1 = "SELECT * FROM Sample_DBExpansion_Data.DBAnalysisInfo WHERE ID = ?" //get all unique globalnames   
	set statement1 = ##class(%SQL.Statement).%New()
	set status1 = statement1.%Prepare(query1)
	set resultset1 = statement1.%Execute(MetaID)
	do $$$AssertEquals(resultset1.%SQLCODE, 0)
	
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.CaptureInfo).PopulateGlobalTable(MetaID,0,1)
	do $$$AssertEquals(st,1)
	
	///check that there is something in the table....
	set query2 = "SELECT * FROM Sample_DBExpansion_Data.GlobalAnalysisInfo WHERE MetaDataID = ?" //get all unique globalnames   
	set statement2 = ##class(%SQL.Statement).%New()
	set status2 = statement2.%Prepare(query2)
	set resultset2 = statement2.%Execute(MetaID)
	do $$$AssertEquals(resultset2.%SQLCODE, 0)
	set count = 0
	while resultset2.%Next()
	{
		set count = count + 1
	}
	do $$$AssertEquals(count, 1)
	
	set count = 0
	
	//check that there is ten more results
	set st = ##class(Sample.DBExpansion.DBSizeAnalysis.CaptureInfo).PopulateGlobalTable(MetaID,0,10)
	do $$$AssertEquals(st,1)
	
	///check that there is something in the table....
	set query3 = "SELECT * FROM Sample_DBExpansion_Data.GlobalAnalysisInfo WHERE MetaDataID = ?" //get all unique globalnames   
	set statement3 = ##class(%SQL.Statement).%New()
	set status3 = statement3.%Prepare(query3)
	set resultset3 = statement3.%Execute(MetaID)
	do $$$AssertEquals(resultset3.%SQLCODE, 0)
	while resultset3.%Next()
	{
		set count = count + 1
	}
	do $$$AssertEquals(count,11)
	
	//delete...
	&sql(DELETE FROM Sample_DBExpansion_Data.DBAnalysisInfo WHERE ID = :MetaID)
	do $$$AssertEquals(SQLCODE, 0) /// test that we can delete the table from db
	&sql(SELECT globalName INTO :myGlobalName FROM Sample_DBExpansion_Data.GlobalAnalysisInfo WHERE MetaDataID = :MetaID)
	do $$$AssertEquals(SQLCODE, 100) /// here we are testing that the foreign key works... delete of DB deletes associated globals
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<Description><![CDATA[
Run by <B>RunTest</B> once after all test methods in the test class are run. Can be used to tear down a test environment that was set up by <B>OnBeforeAllTests</B> See example in <b>OnBeforeAllTests</b>. ]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
	set today = $ZDATETIME($HOROLOG,3)
	//delete msg headers...
	&sql(DELETE FROM ENS.MessageHeader WHERE DATEDIFF('dd',:today,TimeCreated) >=1 )
	RETURN $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Test.TestManager">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************</Description>
<Super>%UnitTest.Manager</Super>
<TimeChanged>66604,40194.8692101</TimeChanged>
<TimeCreated>66584,36233.4296045</TimeCreated>

<Method name="RunTest">
<Description><![CDATA[
how to run the unit tests:
1) create a file folder "Unit Tests" somewhere on your local computer
2) export the unit test file that you want to test (like CaptureTest) into that folder
3) in terminal, set ^UnitTestRoot = "<folder path for Unit Tests folder>"
4) in terminal: do ##class(Sample.DBExpansion.Test.TestManager).RunTest("Unit Tests", "noload/nodelete")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[testspec:%String,qspec:%String,&userparam]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc=..RunTestSuites($g(testspec),.qspec,.userparam)
	If $$$ISERR(sc) Do $system.Status.DisplayError(sc)
	Quit sc
]]></Implementation>
</Method>
</Class>


<Class name="Sample.DBExpansion.Util.Helper">
<Description>
**********************************************************
*                   ** N O T I C E **                    *
*                - TEST/DEMO SOFTWARE -                  *
* This code is not supported by InterSystems as part     *
* of any released product.  It is supplied by            *
* InterSystems as a demo/test tool for a specific        *
* product and version. The user or customer is fully     *
* responsible for the maintenance and testing of this    *
* software after delivery, and InterSystems shall bear   *
* no responsibility nor liabilities for errors or misuse *
* of this code.                                          *
**********************************************************</Description>
<TimeChanged>66604,40200.2430003</TimeChanged>
<TimeCreated>66584,33383.7583228</TimeCreated>

<Method name="HasPersistentProperty">
<Description>
Get properties using macros wrapping direct global references
will fill Arr, pass by reference</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[className:%String,&Arr:%String]]></FormalSpec>
<Implementation><![CDATA[
    // Getting properties via macro-wrapped direct global references is harder to read,
    // but is the fastest way to do it.
    set key = ""
    set i = 1
    set myArray(1) = ""

    &sql(SELECT Name INTO :class FROM %Dictionary.CompiledClass Where Upper(ID) Like Upper(:className)) //maybe will get parameter as all upper..
 	///   set class = className
    for {
        set key = $$$comMemberNext(class,$$$cCLASSproperty,key)
        quit:key=""
        set type = $$$comMemberKeyGet(class,$$$cCLASSproperty,key,$$$cPROPtype)
        set origin = $$$comMemberKeyGet(class,$$$cCLASSproperty,key,$$$cPROPorigin)
        set properties(key) = $listbuild(type,origin)
        if ($classmethod(type,"%Extends", "%Persistent"))
        {
	        set Arr(i, "PropertyName") = key
	    	set Arr(i, "PropertyType") = type
 			set i = i+1
	    }
    }
    QUIT $$$OK
]]></Implementation>
</Method>

<Method name="getNewMessageNum">
<Description>
parameter: time to measure new messages from</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>timeStamp:%TimeStamp</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[

	if timeStamp = "" //no prev data, take all
	{
		&sql(SELECT Count(*) INTO :myCount FROM Ens.MessageHeader)
		return myCount
	}
	else
	{
		&sql(SELECT Count(*) INTO :myCount FROM Ens.MessageHeader WHERE DATEDIFF('ss',:timeStamp,TimeCreated)>0)
		return myCount
	}
]]></Implementation>
</Method>
</Class>
</Export>
